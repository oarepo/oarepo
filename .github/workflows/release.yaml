# -*- coding: utf-8 -*-
#
# Copyright (C) 2025 CESNET z.s.p.o.
# OARepo is free software; you can redistribute it and/or modify
# it under the terms of the MIT License; see LICENSE file for more details.

name: Release Workflow

on:
  workflow_call:
    inputs: {}
    secrets:
      OAREPO_BUMP_VERSION_CLIENT_ID:
        required: true
      OAREPO_BUMP_VERSION_CLIENT_PASSWORD:
        required: true
      PYPI_PASSWORD:
        required: true

jobs:
  # call the test.yaml workflow
  # test:
  #   name: Run Tests
  #   uses: oarepo/oarepo/.github/workflows/test.yaml

  prepare_release:
    name: Prepare Release
    runs-on: ubuntu-24.04
    # needs: test
    steps:
      - name: Set up environment variables for release ${{ github.event.release.tag_name }}
        shell: "bash"
        run: |
          echo "Release triggered for ${{ github.event.release.tag_name }}"
          echo "PIP_EXTRA_INDEX_URL=https://gitlab.cesnet.cz/api/v4/projects/1408/packages/pypi/simple" >> $GITHUB_ENV
          echo "UV_EXTRA_INDEX_URL=https://gitlab.cesnet.cz/api/v4/projects/1408/packages/pypi/simple" >> $GITHUB_ENV
      - name: Create github app token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.OAREPO_BUMP_VERSION_CLIENT_ID }}
          private-key: ${{ secrets.OAREPO_BUMP_VERSION_CLIENT_PASSWORD }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        shell: "bash"
        run: |
          uv sync

      - name: Get location of the module including the version variable
        shell: "bash"
        run: |
          if [ -d src ]; then
            # if there is a src directory, there should be a single subdirectory
            # containing the __init__.py file
            file_with_version=$(ls src/*/__init__.py)
            echo "file_with_version=$file_with_version" > $GITHUB_ENV
            echo "Using the following file for version bump: $file_with_version"
          else
            # need to handle the case where there is no src directory
            file_with_version=$(ls */__init__.py | grep -v tests | head -n 1)
            echo "file_with_version=$file_with_version" > $GITHUB_ENV
            echo "Using the following file for version bump: $file_with_version"
          fi

      - name: Bump version to ${{ github.ref_name }}
        shell: "bash"
        run: |
          new_version=${{ github.ref_name }}
          source .venv/bin/activate

          echo "Bumping version to $new_version"

          echo "Getting current version from $file_with_version"
          echo "==========================="
          cat $file_with_version
          echo "==========================="

          actual_version=$(
            cat "${file_with_version}"        \
            | egrep '__version__ = '           \
            | head -n 1                        \
            | sed 's/__version__ = "//'        \
            | sed 's/"$//'
          )
          echo "Current package version: $actual_version"

          echo "Checking if major versions are the same"
          actual_major_version=$(echo $actual_version | cut -d. -f1)
          new_major_version=$(echo $new_version | cut -d. -f1)

          if [[ "$actual_major_version" != "$new_major_version" ]]; then
            echo "Bumping major version not allowed, exiting."
            exit 1
          else
            echo "Ok, Major versions match for: actual: $actual_version == new: $new_version"
          fi

          echo "Checking if new version ('$new_version') is greater than the current version ('$actual_version')"
          python -c "from packaging.version import parse; exit(0 if parse('$new_version') > parse('$actual_version') else 1)" && {
              echo "$new_version is greater than $actual_version, continuing."
          } || {
              echo "$new_version is lower than or equal to $actual_version, exiting."
              exit 1
          }

          echo "Bumping version in $file_with_version to $new_version"
          cat $file_with_version | sed "s/__version__ = .*'/__version__ = \"$new_version\"/" > $file_with_version.tmp
          mv $file_with_version.tmp $file_with_version

          echo "Version bumped to $new_version:"
          echo "=========================="
          cat $file_with_version
          echo "=========================="

      - name: Build the project
        shell: "bash"
        run: |
          uv build

      # - name: Commit version bump
      #   shell: "bash"
      #   run: |
      #     git config user.name github-actions
      #     git config user.email github-actions@github.com
      #     git add $file_with_version
      #     git commit -m "Bump version to ${{ github.ref_name }}"
      #     git push

      # - name: Publish package
      #   uses: pypa/gh-action-pypi-publish@master
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_PASSWORD }}
